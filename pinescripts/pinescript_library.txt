

***************************************************************
//@version=5
indicator("EMA vs SMMA", shorttitle="EMAvsSMMA", overlay=true)

len_smma = 10
smma = 0.0
smma := na(smma[1]) ? ta.sma(close, len_smma) : (smma[1] * (len_smma - 1) + close) / len_smma
plot(smma, title="SMMA", color=color.red)

len_ema = 20
ema = ta.ema(close, len_ema)
plot(ema, title="EMA", color=color.blue)


***************************************************************
//@version=5
strategy("My Scalping Strategy", overlay=true, margin_long=100, margin_short=100)

ema42 = ta.ema(close, 42)
ema100 = ta.ema(close, 100)
ema200 = ta.ema(close, 200)
ema_check = low > ema42 and ema42 > ema100 and ema100 > ema200 and ema42 > ema42[1] and ema100 > ema100[1] and ema200 > ema200[1]

len_rsi = 14
up = ta.rma(math.max(ta.change(close), 0), len_rsi)
down = ta.rma(-math.min(ta.change(close), 0), len_rsi)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsi_check = rsi >= 50

n = 2
bool downflagDownFrontier = true
bool downflagUpFrontier0 = true
bool downflagUpFrontier1 = true
bool downflagUpFrontier2 = true
bool downflagUpFrontier3 = true
bool downflagUpFrontier4 = true
for i = 1 to n
    downflagDownFrontier := downflagDownFrontier and (low[n-i] > low[n])
    downflagUpFrontier0 := downflagUpFrontier0 and (low[n+i] > low[n])
    downflagUpFrontier1 := downflagUpFrontier1 and (low[n+1] >= low[n] and low[n+i + 1] > low[n])
    downflagUpFrontier2 := downflagUpFrontier2 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+i + 2] > low[n])
    downflagUpFrontier3 := downflagUpFrontier3 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+i + 3] > low[n])
    downflagUpFrontier4 := downflagUpFrontier4 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+4] >= low[n] and low[n+i + 4] > low[n])
flagDownFrontier = downflagUpFrontier0 or downflagUpFrontier1 or downflagUpFrontier2 or downflagUpFrontier3 or downflagUpFrontier4
downFractal = (downflagDownFrontier and flagDownFrontier)

buy_signal = ema_check and rsi_check and downFractal


if (buy_signal)
    strategy.entry("My Long Entry Id", strategy.long)

// shortCondition = ta.crossunder(ta.sma(close, 14), ta.sma(close, 28))
// if (shortCondition)
//     strategy.entry("My Short Entry Id", strategy.short)



***************************************************************
//@version=5
indicator(title="My Scalping Indicator", shorttitle="MyScalpInd", overlay=true)

ema42 = ta.ema(close, 42)
plot(ema42, title="EMA42", color=color.red)
ema100 = ta.ema(close, 100)
plot(ema100, title="EMA100", color=color.green)
ema200 = ta.ema(close, 200)
plot(ema200, title="EMA200", color=color.blue)
ema_check = low > ema42 and ema42 > ema100 and ema100 > ema200 and ema42 > ema42[1] and ema100 > ema100[1] and ema200 > ema200[1]

len_rsi = 14
up = ta.rma(math.max(ta.change(close), 0), len_rsi)
down = ta.rma(-math.min(ta.change(close), 0), len_rsi)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsi_check = rsi >= 50

bg_col = ema_check and rsi_check ? #00FF0030 : #FF000030
bgcolor(bg_col)

check_plot = 0
if ema_check and rsi_check
    check_plot := 61000
else
    check_plot := 58000
// plot(check_plot)


// Buy Marker
bool no_loss = true
bool win = false
bool buy_marker = false
n = 10
for i = 1 to n
    no_loss := no_loss and close[n] * 0.99 <= low[n-i]
    win := win or close[n] * 1.02 <= high[n-i] 
buy_marker := win and no_loss
plotshape(buy_marker, offset=-n, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)  

// Williams Fractals
// Define "n" as the number of periods and keep a minimum value of 2 for error handling.
//n = 2
// downFractal
// bool downflagDownFrontier = true
// bool downflagUpFrontier0 = true
// bool downflagUpFrontier1 = true
// bool downflagUpFrontier2 = true
// bool downflagUpFrontier3 = true
// bool downflagUpFrontier4 = true
// for i = 1 to n
//     downflagDownFrontier := downflagDownFrontier and (low[n-i] > low[n])
//     downflagUpFrontier0 := downflagUpFrontier0 and (low[n+i] > low[n])
//     downflagUpFrontier1 := downflagUpFrontier1 and (low[n+1] >= low[n] and low[n+i + 1] > low[n])
//     downflagUpFrontier2 := downflagUpFrontier2 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+i + 2] > low[n])
//     downflagUpFrontier3 := downflagUpFrontier3 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+i + 3] > low[n])
//     downflagUpFrontier4 := downflagUpFrontier4 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+4] >= low[n] and low[n+i + 4] > low[n])
// flagDownFrontier = downflagUpFrontier0 or downflagUpFrontier1 or downflagUpFrontier2 or downflagUpFrontier3 or downflagUpFrontier4
// downFractal = (downflagDownFrontier and flagDownFrontier)

//buy_signal = ema_check and rsi_check
// NOTE plotshape argument offset=-n was deleted
//plotshape(buy_signal, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)


***************************************************************
//@version=5
indicator(title="TD Diff Indicator", shorttitle="TdDiffInd", overlay=true)
// https://towardsdatascience.com/technical-pattern-recognition-for-trading-in-python-63770aab422f

true_low = 0.0
true_low := math.min(low, low[1])

buy_pres = 0.0
buy_pres := close - true_low

true_hi = 0.0
true_hi := math.max(high, high[1])

sell_pres = 0.0
sell_pres := close - true_hi


***************************************************************
//@version=5
strategy("Grid Strategy", shorttitle="GridStrat", overlay=true, margin_long=100, margin_short=100)

// Inputs
grid_step_percentage = input(title="Grid Step [%]", defval=5)
src = input(title="Source", defval=close)

// Constants
var base_price = src
var grid_step = base_price * grid_step_percentage / 100
var i_order = 0

// Init grid lines
grid_up_2 = base_price + 3 * grid_step
grid_up_1 = base_price + 2 * grid_step
grid_up_0 = base_price + 1 * grid_step
grid_down_0 = base_price
grid_down_1 = base_price - 1 * grid_step
grid_down_2 = base_price - 2 * grid_step

// Update grid lines
for i = -100 to 100
    if base_price + i * grid_step > src
        grid_up_2 := base_price + (i + 2) * grid_step
        grid_up_1 := base_price + (i + 1) * grid_step
        grid_up_0 := base_price + i * grid_step
        grid_down_0 := base_price + (i - 1) * grid_step
        grid_down_1 := base_price + (i - 2) * grid_step
        grid_down_2 := base_price + (i - 3) * grid_step
        break

// Plot grid lines        
plot(grid_up_2)
plot(grid_up_1)
plot(grid_up_0)
plot(grid_down_0)
plot(grid_down_1)
plot(grid_down_2)

// Check open buy orders
for i = 0 to 10
    for j = 0 to strategy.opentrades - 1
        ep = strategy.opentrades.entry_price(i)
        // Check if entry price is equal to grid line with small interval tolerance
        if (grid_down_0 - i * grid_step) + grid_step * 0.1 > ep and ep > (grid_down_0 - i * grid_step) - grid_step * 0.1
            // Do nothing
            a = 1
        else
            // Place buy orders
            strategy.enter("ID0", strategy.long, qty=1, limit=)






// if src > grid_up_0[1]

// if strategy.position_size <= 0
//     if src > grid_up_0[1]
//         strategy.enter("ID0", strategy.long, 100)
// else
//     if src < grid_down_0[1]
//     strategy.order("ID0", strategy.long, 100, limit=grid_up_0, stop=grid_down_0, when=strategy.position_size <= 0)


***************************************************************
//@version=5
strategy("My Naive Strategy", overlay=true, margin_long=100, margin_short=100)

take_profit = 1 + input.float(defval = 1, title = "Take Profit [%]", minval = 0.1, step = 0.1) / 100
stop_loss = 1 - input.float(defval = 1, title = "Stop Loss [%]", minval = 0.1, step = 0.1) / 100
position_size = input.int(defval = 100, title = "Position Size", minval = 10, step = 10)
ema_length_1 = input.int(defval = 5, title = "EMA Time 1", minval = 1, step = 500)
ema_length_2 = input.int(defval = 20, title = "EMA Time 2", minval = 1, step = 500)
ema_length_3 = input.int(defval = 100, title = "EMA Time 3", minval = 1, step = 500)

var tick_counter = 1
tick_counter := tick_counter + 1

var cooldown = 0
cooldown := cooldown + 1

var trade_id = 0

e1 = ta.ema(close, ema_length_1)
e2 = ta.ema(close, ema_length_2)
e3 = ta.ema(close, ema_length_3)

indicator = e1 > e2 and e2 > e3 and e1 > e1[1] and e2 > e2[1] and e3 > e3[1]

//if strategy.position_size < 0.1
//if indicator
strategy.order("long " + str.tostring(trade_id), strategy.long, qty = position_size, when = indicator)
strategy.exit("exit " + str.tostring(trade_id), from_entry = "long " + str.tostring(trade_id), limit = close * take_profit, stop = close * stop_loss, when = indicator)
if indicator
    trade_id := trade_id + 1
    cooldown := 0

plot(e1)
plot(e2)
plot(e3)
bgcolor(indicator ? color.green : color.silver, transp=75)
//plot(take_profit)
//plot(strategy.position_size)


***************************************************************
//@version=5
indicator("Monotonity index")

lookback_period = input.int(defval = 100, title = "Lookback period", minval = 1, step = 1000)
ema_length = input.int(defval = 100, title = "EMA length", minval = 1, step = 1000)

win_count = 0

for i = 1 to lookback_period
    if high > close[i]
        win_count += 1
        
monotonity_index = win_count / lookback_period
monotonity_index_ema = ta.ema(monotonity_index, ema_length)


plot(monotonity_index, title="Monotonity index", color=color.blue)
plot(monotonity_index_ema, title="Monotonity index EMA", color=color.yellow)
hline(0.8, "80 Line", color=color.red)


***************************************************************
//@version=5
strategy("Profit Oscillator Strategy", overlay=true, margin_long=100, margin_short=100)

lookback_period = input.int(defval = 100, title = "Lookback period", minval = 1, step = 1000)
ema_length = input.int(defval = 20, title = "EMA length", minval = 1, step = 1000)
profit_level = input.float(defval = 1.0, title = "Profit level", minval = 0.1, step = 0.1)

profit = 0.0
for i = 1 to lookback_period
    profit += (close - close[i]) / close[i]
avg_profit = profit * 100 / lookback_period
avg_profit_ema = ta.ema(avg_profit, ema_length)

longCondition = ta.crossover(avg_profit_ema, profit_level)
if (longCondition)
    strategy.entry("My Long Entry Id", strategy.long)

shortCondition = ta.crossunder(avg_profit_ema, -profit_level)
if (shortCondition)
    strategy.entry("My Short Entry Id", strategy.short)
	
	
***************************************************************
//@version=5
indicator("Win/Loss Labler")

trade_max_length = input.int(defval = 10, title = "Trade max length", minval = 1, step = 1)
take_profit = input.float(defval = 1, title = "Take Profit [%]", minval = 0.1, step = 0.1)
stop_loss = input.float(defval = 1, title = "Stop Loss [%]", minval = 0.1, step = 0.1)

buy_price = close[trade_max_length]
take_profit_price = buy_price * (1 + (take_profit / 100))
stop_loss_price = buy_price * (1 - (stop_loss / 100))
col = color.new(color.gray, 100) // full transparent
for i = 1 to trade_max_length
    idx = trade_max_length - i
    if high[idx] > take_profit_price
        col := color.new(color.green, 50)
        break
    else if low[idx] < stop_loss_price
        col := color.new(color.red, 50)
        break

bgcolor(col)

// stop candle
plotcandle(close[trade_max_length], take_profit_price, stop_loss_price, close[trade_max_length], color = color.new(color.gray, 100), wickcolor=color.new(color.gray, 25)) 

// true candle
plotcandle(open[trade_max_length], high[trade_max_length], low[trade_max_length], close[trade_max_length], color = open[trade_max_length] < close[trade_max_length] ? color.green : color.blue, wickcolor=color.black) 


***************************************************************
//@version=5
indicator("Profit Oscillator")

lookback_period = input.int(defval = 100, title = "Lookback period", minval = 1, step = 10)
ema_length = input.int(defval = 20, title = "EMA length", minval = 1, step = 10)
delay = input.int(defval = 0, title = "Delay", minval = 0, step = 1)
h_line_level = input.float(defval = 1, title = "Hor Line Level", minval = 0.1, step = 0.1)
linreg_length = input.int(defval = 4, title = "Linear regression length", minval = 1, step = 1)

profit = 0.0
//buy = (open + high + low + close) / 4 // possible buy price
for i = 1 to lookback_period
    profit += (close[delay] - close[i + delay]) / close[i + delay]
avg_profit = profit * 100 / lookback_period
avg_profit_ema = ta.ema(avg_profit, ema_length)

// Linear regression slope
src = avg_profit_ema
//src = close
sum_x = 0.0
sum_y = 0.0
sum_xy = 0.0
sum_xx = 0.0
for x = 1 to linreg_length
    sum_x += x
    sum_y += src[x]
    sum_xy += x * src[x]
    sum_xx += x * x
slope = -((linreg_length * sum_xy) - (sum_x * sum_y)) / ((linreg_length * sum_xx) - (sum_x * sum_x)) * linreg_length

//plot(avg_profit, title="Monotonity index", color=color.blue)
//plot(avg_profit_ema, title="Monotonity index EMA", color=color.yellow)
plot(slope, title="Monotonity index EMA Slope", color=color.red)
hline(h_line_level, "1 Line", color=color.green)
hline(0, "Zero Line", color=color.white)
hline(-h_line_level, "-1 Line", color=color.red)



